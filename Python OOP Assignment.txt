## Python OOP Assignment
Q1. What is the purpose of Python's OOP?
	OOPs is to improve code readability and reusability . It aims to implement real-world entities like abstraction, encapsulation, inheritance and polymorphism.
	Object Oriented Pragramming uses objects and classes in programming .

Q2. Where does an inheritance search look for an attribute?
	An inheritance search looks for an attribute first in the instance object, then in the class the instance was created from, then in all higher superclasses, progressing from left to right (by default). The search stops at the first place the attribute is found.
	
Q3. How do you distinguish between a class object and an instance object?
	The basic concept of OOP is this: Class >> Object >> Instance.
	The class = the blue print. The Object is an actual thing that is built based on the 'blue print'. An instance is a virtual copy (but not a real copy) of the object.

Q4. What makes the first argument in a class’s method function special?
	Self is the first method in Python class, The self variable points to the instance of the class that you're working with.
	The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
	It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class

Q5. What is the purpose of the __init__ method?
	All classes have a function called __init__(), which is always executed when the class is being initiated.
	Use the __init__() function to assign values to object properties, or other operations that are necessary to do when the object is being created:
	The __init__() function is called automatically every time the class is being used to create a new object.

Q6. What is the process for creating a class instance?
	You create a class instance by calling the class name as though it were a function; any arguments passed into the class name show up as arguments two and beyond in the __init__ constructor method.

	x = ClassName()
	y = AnotherClass(arg1, arg2)

Q7. What is the process for creating a class?
	class ClassName():

Q8. How would you define the superclasses of a class?
	A superclass is the class from which many subclasses can be created.
	The subclasses inherit the characteristics of a superclass.
	The superclass is also known as the parent class or base class.
	
Q9. What is the relationship between classes and modules?
	Classes in python act as a blueprint based on which objects are created. Objects are the very basis for object-oriented programming. The objects are the real-world entities, and class acts as a template that defines those objects.
	class class_name:
		  var = 'Class variable'
		 
		  def class_function1(self):
			#function1 body
	Modules: collect functionality into logical units -  Modules in Python are files with a .py extension using which we can reuse elements inside that file. When we create a python program, the program may contain inside it functions, variables, and even classes.
		we can import that entire file as a module into another program. Doing so makes our code reusable and improves its readability. An entire project can then be broken down into smaller sections, and thus the code becomes more manageable.
		Ex: import using import statement
		
Q10. How do you make instances and classes?
	Classes in python act as a blueprint based on which objects are created. Objects are the very basis for object-oriented programming. The objects are the real-world entities, and class acts as a template that defines those objects.
	class class_name:
		  var = 'Class variable'
		 
		  def class_function1(self):
			#function1 body
	Instance: To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.
	You access the object's attributes using the dot operator with object. Class variable would be accessed using class name
		"This would create first object of Employee class"
		emp1 = Employee("Zara", 2000)
		"This would create second object of Employee class"
		emp2 = Employee("Manni", 5000)
		
		# Access objects
		emp1.displayEmployee()
		emp2.displayEmployee()
		print "Total Employee %d" % Employee.empCount
		
		#Example:
			class Employee:
			   'Common base class for all employees'
			   empCount = 0
			   def __init__(self, name, salary):
				  self.name = name
				  self.salary = salary
				  Employee.empCount += 1
			   def displayCount(self):
			   print "Total Employee %d" % Employee.empCount
			   def displayEmployee(self):
				  print "Name : ", self.name, ", Salary: ", self.salary
			"This would create first object of Employee class"
			emp1 = Employee("Zara", 2000)
			"This would create second object of Employee class"
			emp2 = Employee("Manni", 5000)
			emp1.displayEmployee()
			emp2.displayEmployee()
			print "Total Employee %d" % Employee.empCount

Q11. Where and how should be class attributes created?
	A Python class attribute is an attribute of the class (circular, I know), rather than an attribute of an instance of a class.
	Let’s use a Python class example to illustrate the difference. Here, class_var is a class attribute, and i_var is an instance attribute:

	class MyClass(object):
		class_var = 1

		def __init__(self, i_var):
			self.i_var = i_var
		
Q12. Where and how are instance attributes created?
	Instance: To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.
	You access the object's attributes using the dot operator with object. Class variable would be accessed using class name
		"This would create first object of Employee class"
		emp1 = Employee("Zara", 2000)
		"This would create second object of Employee class"
		emp2 = Employee("Manni", 5000)
		
Q13. What does the term &quot;self&quot; in a Python class mean?
	The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
	It does not have to be named self , you can call it whatever you like, but it has to be the first parameter of any function in the class

Q14. How does a Python class handle operator overloading?

Q15. When do you consider allowing operator overloading of your classes?

Q16. What is the most popular form of operator overloading?
	Operator overloading is the process of using an operator in different ways depending on the operands. You can change the way an operator in Python works on different data-types.
	A very popular and convenient example is the Addition (+) operator
	
Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?

Q18. Describe three applications for exception processing.

Q19. What happens if you don&#39;t do something extra to treat an exception?

Q20. What are your options for recovering from an exception in your script?

Q21. Describe two methods for triggering exceptions in your script.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?
	The try block lets you test a block of code for errors.
	The except block lets you handle the error.
	The else block lets you execute code when there is no error.
	The finally block lets you execute code, regardless of the result of the try- and except blocks.
	
	The try block is used to check some code for errors i.e the code inside the try block will execute when there is no error in the program. 
	Whereas the code inside the except block will execute whenever the program encounters some error in the preceding try block.

Q24. What are the two most popular try statement variations?
	try
	except
	
Q25. What is the purpose of the raise statement?
	Python raise Keyword is used to raise exceptions or errors. The raise keyword raises an error and stops the control flow of the program.
	 It is used to bring up the current exception in an exception handler so that it can be handled further
	Advantages of the raise keyword:
		It helps us raise exceptions when we may run into situations where execution can’t proceed.
		It helps us reraise an exception that is caught.
		Raise allows us to throw one exception at any time.
		It is useful when we want to work with input validations.
		a = 5
	  	if a % 2 != 0:
			raise Exception("The number shouldn't be an odd integer")

Q26. What does the assert statement do, and what other statement is it like?

Q27. What is the purpose of the with/as argument, and what other statement is it like?

Q28. What are *args, **kwargs?

Q29. How can I pass optional or keyword parameters from one function to another?

Q30. What are Lambda Functions?
	Use lambda functions when an anonymous function is required for a short period of time.
	A lambda function can take any number of arguments, but can only have one expression.
	x = lambda a : a + 10
	x = lambda a, b : a * b
	x = lambda a, b, c : a + b + c

Q31. Explain Inheritance in Python with an example?
	Inheritance is basically the process of basing a class on another class i.e to build a class on a existing  class. The new class contains all the features and functionalities of the old class in addition to its own.
	The class which is newly created is known as the subclass or child class and the original class is the parent class or the superclass.
	the data and behavior of a superclass can be passed onto a subclass.
			# Parent Class
		class Course(object):
			  # Constructor 
			  def __init__(self, CourseName,Topic): 
				  self.CourseName =CourseName
				  self.Topic=Topic

		# Inherited or Sub class  
		class Author(Course): 
			#Constructor
			def __init__(self,CourseName,Topic,Authorname):
				#deriving attributes of Parent Class
				Course.CourseName=CourseName
				Course.Topic=Topic
				
				#adding a new attribute to the subclass
				self.Authorname=Authorname

			def printCourseDetails(self):
				print(Course.CourseName,Course.Topic,self.Authorname)

#The three consecutive inputs will take name of the course,one of the topics from that course and the name of author who writes a post for that topic and will print them in order.
user_input=Author(input(),input(),input())
user_input.printCourseDetails()

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?

Q33. Which methods/functions do we use to determine the type of instance and inheritance?

Q34.Explain the use of the 'nonlocal' keyword in Python.

Q35. What is the global keyword?